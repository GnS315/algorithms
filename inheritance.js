/*
* Наследование через классы
* Наследование классов - способ расширения одного класса другим, таким образом мы можем добавить новый функционал
* к уже существующему
* Наследование происходит при помощи ключевого слова extends
* */

// Допустим, у нас есть класс Animal

class Animal {
    constructor(name) {
        this.speed = 0
        this.name = name
    }
    run(speed) {
        this.speed = speed
        console.log(`${this.name} бежит со скоростью ${this.speed}`)
    }
    stop() {
        this.speed = 0
        console.log(`${this.name} стоит неподвижно.`)
    }
}

/*
* Допустим мы хотим создать класс Fox, который будет расширять класс Animal
* */

class Fox extends Animal {
    hunt() {
        console.log(`${this.name} охотится`)
    }
}

const fox = new Fox('Полярная лиса')

fox.run(10) // Полярная лиса бежит со скоростью 10
fox.hunt() // Полярная лиса охотится

/*
* Таким образом объект класса Fox имеет доступ как к методым Fox, так и к методам Animal
* Но в конечном итоге всё сводится к прототипам
* */

/**********************************************************************/

/*
* Прототипное наследование
* В js у объектов существует скрытое свойство [[Prototype]], которое либо равно null, либо ссылается на другой объект,
* этот объект и есть прототип. Когда мы хотим получить какое-то свойство, а его нет,
* то оно автоматически берется из прототипа
* Одним из способов задать прототип, является использование __proto__ - геттер/сеттер для [[Prototype]]
* */

let animal = {
    eats: true
};
let rabbit = {
    jumps: true
};

rabbit.__proto__ = animal;

// теперь мы можем найти оба свойства в rabbit:
console.log(rabbit.eats); // true
console.log(rabbit.jumps); // true
